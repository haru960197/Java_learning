第11章「高度な継承」

目次
・2種類の開発者
・２つの不都合と３つの懸念
・抽象クラス
・インタフェース

・2種類の開発者
開発者には、2種類ある。
①目の前のプログラム開発に必要なクラスを作る開発者（既存クラスを継承し、子クラスを作る）
②将来、他の人が利用するであろうクラスを作る開発者（親クラスとなるクラスを作る）
今回は、この②の開発者の視点における、継承の利用方法を扱う。
②の開発者は、①の開発者が「安全に効率よく利用できるクラス」を作ることが重要。

・２つの不都合と３つの懸念
汎用的な親クラスを作るにあたって、いくつかの不都合と3つの懸念が浮かぶかもしれない。
不都合1. 詳細を記述することができないメソッドが出てきてしまう。
	子クラスごとに微妙に動作を変えたい、必須のメソッドの記述ができない。
	そこで、オーバーライドしてもらうことを前提に、何も中身を書かないメソッドを作ろうとすると、以下の懸念が生まれる。
		懸念1.1. オーバーライドをし忘れる
		懸念2.1. 「何もしないメソッド」との区別がつかない
不都合2. クラスには「継承」と「newによるインスタンス化」の2つの利用方法がある点。
	②の開発者が作る汎用的なクラスは、継承を前提としていて、インスタンス化をしてほしくない場合がある。
	しかし、通常のクラスは継承とインスタンス化という２つの利用方法があるので、以下の懸念が生まれる。
		懸念2.1 newによってインスタンス化されてしまう。

・抽象クラス
これらの懸念を一気に解決するのが抽象クラスである。
抽象クラスとは、抽象メソッドを含んだクラスであり、newでインスタンス化することができない。
抽象メソッドとは、「現時点では何をするかを確定できないメソッド」であり、「何もしないメソッド」とは意味合いが全く異なる。
抽象クラスと抽象メソッドの宣言方法
public abstract class クラス名 {
	// 抽象メソッドの定義
	public abstract 型 メソッド名(型1 引数1, 型2 引数2, ...); // {}はいらない！
}
「abstract」は「抽象」を意味する。
抽象クラスを継承した子クラスにも、もちろん抽象メソッドは含まれているので、そのままでは抽象クラスとなる。
しかし、オーバーライドしてメソッドの処理内容を定義することで通常のクラスとなり、インスタンス化が可能になる。
このようにメソッドの内容を確定させることを、「実装」という。
抽象クラスを継承した抽象クラスが存在しても何も問題はなく、これにより継承ツリーが多階層化していき、抽象↔具体のグラデーションができあがる。

・インタフェース
継承階層を上にたどっていくと、本当に抽象的なクラスが残る。これを特別扱いする。
インタフェースの定義
①すべてのメソッドは抽象メソッドである
②基本的にフィールドを一つも持たない
インタフェースには、以下の効果がある
1.子クラスに、共通のメソッド群を実装するように強制できる
2.子クラスは、インタフェースが定めたメソッドを持っていることが保証される

宣言
public interface インタフェース名 {
	// 抽象メソッド
	型 抽象メソッド名(型1 引数1, ...);
	// 例
	void run();
}
インタフェースでは、抽象メソッドの宣言に「public abstract」が不要！
フィールドを宣言すると、自動で「static final」が付いた定数フィールドとなる。

インタフェースの実装
public class クラス名 implements インタフェース名 {
	// 抽象メソッドの実装など
}
インタフェースの継承は「実装」と呼び、「implements」を使う。
インタフェースは、抽象メソッドしか持たないため、同名メソッドの処理内容が衝突することがなく、
ポイント「多重継承が認められている！」
また、実装と同時に他のクラスを継承することができる。したがって、
継承と、複数のインタフェースの実装
public class クラス名 extends 親クラス名 implements 親インタフェース1, 親インタフェース2, ... {
}

インタフェースがインタフェースを継承することも可能。これももちろん複数可能。
public interface 子インタフェース名 extends 親インタフェース1, 親インタフェース2, ... {
}
「extends」であることに注意！実装はしていないため。

まとめ
継承元　　　継承先　使用する用語　継承元の数
クラス　　　　クラス　　extends        1
インタフェース　 クラス   implements      1~
インタフェース インタフェース extends        1~ 



