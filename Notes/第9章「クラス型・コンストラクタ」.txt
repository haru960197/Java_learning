第9章「クラス型・コンストラクタ」

・クラス型は参照型
自分で作成したクラス型は、配列と同じく参照型である。
int[] vec = new int[5];
for (int i=0; i<vec.length(); i++) vec[i] = i;
// vec = {1, 2, 3, 4, 5}
cout << vec << endl;
cout << vec[0] << endl;
実行結果
4321543
1
これを順を追って、JVM内部で何が起こっているのかを解説すると、
1:int[] vec // 配列の先頭要素のアドレスを保存するためのメモリをヒープ領域に確保
2:new int[5] // int型の要素5つ分のメモリをヒープ領域に確保
3:vec = new int[5] // 配列の先頭のアドレスをvecに代入
4:for (... // 確保した配列の要素用のメモリ上に書き込み
5:cout << vec // 配列の先頭要素のアドレスを出力
6:cout << vec[0] // 配列の0番目の要素の中身を出力

このように、配列型は、あくまでヒープ領域上に確保された実際の配列の位置を指す参照型なのである。
同様に、クラス型も参照型である。
したがって、
Hero h = new Hero();
これは、
new Hero(); // ヒープ領域に「int hp, String name」分のメモリを確保
Hero h = new Hero(); // その領域の先頭アドレスをhに代入
これがJVMの中で行われているのである。

ポイント！「インスタンスは、new されて初めて生成される！」

・String型の正体
String型も実はクラス型である。つまり、参照型である。
String s;　は実は
java.lang.String s;
と書かなければならないのだが、
import java.lang
が自動でされているので、省略可能なのである。

・has-a の関係
あるクラスが他のクラス型をフィールドに持つことも可能である。
// Sword.java
public class Sword {
	String name;
	int damage;
}
// Hero.java
public class Hero {
	int hp;
	String name;
	Sword sword;
}
// Main.java
public class Main {
	public static void main(String[] args) {
		Sword s = new Sword(); // 剣インスタンスsを作成！
		s.name = "炎の剣";
		Hero h = new Hero();
		h.sword = s; // ここでHeroのswordフィールドに、インスタンスsのアドレスを代入！

「あるクラスが別のクラスをフィールドとして利用している関係」を
「has-a の関係」
という。


・コンストラクタ
クラスの中に記述することで、インスタンス化したあと、フィールドに値を代入する操作を、JVMが自動で行ってくれる機能である。
・宣言方法
public class クラス名 {
	public クラス名() {
		// 自動で行う処理
		this.~~ = ~~; etc...
	}
}
①メソッド名がクラス名と完全に一致
②返り値が記述されていない(voidもだめ)

・引数を受け取るコンストラクタ
public class Hero {
	String name;
	int hp;
	
	public Hero(String name) {
		this.name = name;
	}
}
引数の個数に合わせて動くようにオーバーロードすることもできる。
public Hero(String name) {
	this.name = name;
}
public Hero() {
	// 名前の指定がないので、デフォルトで設定
	this.name = "Unknown";
}

・暗黙のコンストラクタ
本来、クラスにはコンストラクタが最低1つ以上定義されていなければならない。
そこで、コンストラクタが一つも記述されていない場合に限り、JVMが自動で中身のないコンストラクタを作成してくれる。そのおかげで、これまでは「new Hero()」と引数なしコンストラクタを動かせていた。
しかし、引数有のコンストラクタを定義した場合、引数なしのコンストラクタも定義しておかなければ、「new Hero()」のように、引数なしでインスタンス化しようとしても、動かなくなってしまう。
ポイント！「引数有のコンストラクタと引数無コンストラクタはセット！」
※あえて引数無コンストラクタを書かずに、引数無のインスタンス化でエラーを起こすようにすることもある。

・他のコンストラクタの呼び出し方法
本来コンストラクタはJVMにしか呼び出せない。しかし、同じ処理を記述する手間を省くために、クラス内の他のコンストラクタを呼び出すようにJVMに依頼する記法がある。
「this(引数);」
これで呼び出すことができる。引数の足りないコンストラクタの定義が楽になる。


