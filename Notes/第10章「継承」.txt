第10章「継承」

目次

・継承とは
・継承の使用方法
・オーバーライド
・継承やオーバーライドの禁止
・継承を利用したクラスのインスタンスの内部構造
・親クラスのメンバの使用方法
・継承とコンストラクタ
・正しい継承の使い方：「is-aの関係」


・継承とは
あるクラスの派生のようなクラスを作りたいときに使用する。
継承元を親クラス、継承先を子クラスと呼ぶ。孫クラス、ひ孫クラス、ひひ孫...と繰り返し継承可能。
※複数の親クラスを持つことは不可能。
コピペしてコードを書くのと違い、親クラスに変更を加えた際にも、その変更が自動的に子クラスに反映されるという利点がある。
また、継承を繰り返していくことで、親クラスは汎化し、子クラスは特化していく。
継承には、「汎化・特化」の関係が暗に存在する。

・継承の使用方法
宣言方法
public class クラス名 extends 親クラス名 {
	// 新たに加えるメンバを宣言

	// コンストラクタを宣言
}

継承することで、親クラスのメンバがすべて子クラスにJVMにより自動で宣言される。
つまり、記述しなくても、親クラスと同じフィールドやメソッドにアクセス可能。

・オーバーライド
親クラスに含まれるメソッドに変更を施し、上書きする方法。
※オーバーロード（引数の型や個数が異なる同名のメソッドの宣言）とは異なるので注意！
宣言方法
public 型 メソッド名() {
	// 新たな処理
}
つまり、子クラスにおいてメソッドを宣言する際、
①親クラスに同名のメソッドがない→追加
②親クラスに同名のメソッドがある→上書き

・継承やオーバーライドの禁止
自分のクラスを継承不可能にすることができる。
public final class クラス名 {	
}
このようにクラスの前に「final」をつけるだけ。
java.utilなどに含まれるクラスは継承ができなくなっている。
また、クラスの継承は許可しても、あるメソッドだけをオーバーライド禁止にすることもできる。
public class クラス名 {
	public final 型 メソッド名() {
	}
}
同様に型の前に「final」をつければよい。
※フィールドにこのような禁止方法はないが、通常フィールドはオーバーライドしてはいけない！

・継承を利用したクラスのインスタンスの内部構造
子クラスのインスタンスは、親インスタンス部と子インスタンス部の多重構造となっている。
メンバにアクセスする際は、子インスタンス部内を探し、あればそれを呼び出し、なければ親インスタンス部を探し、なければ親の親インスタンス部...
したがって、オーバーライドすれば、子インスタンス部のメソッドが先にヒットし、呼び出される。
ポイント「オーバーライドしても、親インスタンス部には元のメソッドが残っている！」

・親クラスのメンバの使用方法
メソッドでオーバーライドする際などに、親インスタンス部のメソッドを呼び出すことができる。
同じメソッドを繰り返したときなどに、これを使わないと無限ループに陥る。
呼び出し方法
super.メソッド名
ex)
public void attack(Matango m) {
	super.attack(m); // 親のattack()を一度呼び出す
	if (fly) {
		super.attack(m); // 親のattack()をもう一度呼び出す
	}
}

このsuper.attack(m)の部分を「m.hp -= 5;」のようにすると、親クラスのattackメソッドのダメージを書き換えた際に対応できない。

・継承とコンストラクタ
すべてのコンストラクタはその先頭で必ず内部インスタンス部分(親クラス)のコンストラクタを呼び出さなければならない。
親クラスのコンストラクタの呼び出し
super();
super(引数); // 引数を渡したい場合
したがって、実質的には、最も親のクラスのインスタンスから、子に向かってコンストラクタが呼ばれる。
ex)
public class SuperHero extends Hero {
	public SuperHero() {
		super();
		// 処理
	}
}
書かないと自動で
public 子クラス名() {
	super();
}
が追加される。親に引数無コンストラクタがないとエラーになる。

・正しい継承の使い方：「is-aの関係」
継承は、楽だからと言ってむやみに使っていいものではなく、ルールがある。それは
「子クラスは、親クラスの一種である。(子クラス is a 親クラス)」
この関係が成り立っていなければならない。
そうでなければ、
・クラスの拡張に伴い、現実世界と乖離していく
・「多様性」を利用できなくなる
このような問題が発生する。